60,64c60
<         .viewing-window {
<             width: 300px;
<             height: 460px;
<             background-color: #2f2f2f;
<             margin-right: 16px;
---
>         .main-container {
66,84c62,65
<             align-items: flex-start;
<             justify-content: center;
<             border-radius: 8px;
<             box-shadow: 0 0 10px black;
<             position: fixed;
<             top: 411px;              /* vertically center, optional */
<             left: 20px;
<             transform: translateY(-50%);  /* vertically center, optional */
<             z-index: 10;           /* make sure it stays above background layers */
<         }
<         :root{
<             --side-width: 320px;      /* width of both viewer & search   */
<             --side-gap :  20px;       /* the left/right gaps you used    */
<         }
<         .main-container{
<             /* reserve space for BOTH side panels + their gaps            */
<             margin-left : calc(var(--side-width) + var(--side-gap));
<             margin-right: calc(var(--side-width) + var(--side-gap));
<             width: auto;              /* flexbox will shrink as needed   */
---
>             height: 80vh; /* adjust as needed */
>             gap: 10px;
>             padding: 0px 10px 10px 10px;
>             overflow: hidden; /* Prevent horizontal overflow */
85a67
>         /* Left side: existing container */
91,92c73
<             padding-left: 30px;
<             padding-right: 0px;
---
>             padding-left: 320px;
93a75
>         /* Right side: search panel */
95c77
<             width: 360px;
---
>             width: 320px;
98,100c80
<             position: fixed;
<             top: 100px;
<             right: 20px;
---
>             display: flex;
105c85,86
<             height: 85vh;           /* fix height */
---
>             max-height: 100vh;
>             height: auto;           /* fix height */
142,146c123,125
<             justify-content: center;
<             max-width: 100%;
<             overflow-x: hidden;
<             padding-top: 25px;
<             padding-bottom: 25px;
---
>             justify-content: flex-start; /* align left */
>             max-width: 100%; /* prevent overflow */
>             overflow-x: hidden; /* disable horizontal scroll */
250c229
<     <div id="deck-info" style="position: relative; left: -45px; width: 1200px; margin: 12px auto; padding: 8px 16px; background-color: #3a3a3a; color: white; font-family: 'Racing Sans One', cursive; font-size: 18px; border-radius: 8px; display: flex; gap: 8px; text-align: center; justify-content: space-between;">
---
>     <div id="deck-info" style="width: 60%; margin: 12px auto; padding: 8px 16px; background-color: #3a3a3a; color: white; font-family: 'Racing Sans One', cursive; font-size: 18px; border-radius: 8px; display: flex; gap: 8px; text-align: center; justify-content: space-between;">
253c232,233
<     <div class="viewing-window" id="viewing-window">
---
> 
>       <div class="viewing-window" id="viewing-window">
255c235,236
<     </div>
---
>       </div>
> 
258,260c239,240
<         <div class="container">
<             <div class="card-wrapper" id="card-wrapper"></div>
<         </div>
---
>     <div class="container">
>         <div class="card-wrapper" id="card-wrapper"></div>
266c246
<         <button id="toggle-options-btn" style="margin-bottom: 8px; font-family: 'Racing Sans One', cursive; cursor: pointer; width: 300px; display:block; margin:0 auto 8px;">
---
>         <button id="toggle-options-btn" style="margin-bottom: 8px; font-family: 'Racing Sans One', cursive; cursor: pointer;">
270,271c250
<             <span class="line-gap"></span>
<             <div id="card-type-buttons" style="display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px; justify-content:center;">
---
>             <div id="card-type-buttons" style="display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px;">
296a276
>         </div>
315,331c295,313
<             //const sortedCards = cards.sort((a, b) => a.name.localeCompare(b.name));
<             //sortedCards.forEach(card => renderCard(card, container));
< 
<             let selectedCardType = null;
< 
<             document.querySelectorAll('.type-btn').forEach(button => {
<                 button.addEventListener("click", () => {
<                     if (selectedCardType === button.dataset.type) {
<                         selectedCardType = null; // toggle off
<                         button.classList.remove("active");
<                     } else {
<                         selectedCardType = button.dataset.type;
<                         document.querySelectorAll('.type-btn').forEach(b => b.classList.remove("active"));
<                         button.classList.add("active");
<                     }
<                     renderSearchResults();
<                     updateChampionSubfilterVisibility();
---
>             (async () => {
>                 //const sortedCards = cards.sort((a, b) => a.name.localeCompare(b.name));
>                 //sortedCards.forEach(card => renderCard(card, container));
> 
>                 let selectedCardType = null;
> 
>                 document.querySelectorAll('.type-btn').forEach(button => {
>                     button.addEventListener("click", () => {
>                         if (selectedCardType === button.dataset.type) {
>                             selectedCardType = null; // toggle off
>                             button.classList.remove("active");
>                         } else {
>                             selectedCardType = button.dataset.type;
>                             document.querySelectorAll('.type-btn').forEach(b => b.classList.remove("active"));
>                             button.classList.add("active");
>                         }
>                         renderSearchResults();
>                         updateChampionSubfilterVisibility();
>                     });
333d314
<             });
335c316
<             let selectedChampionTier = "All";
---
>                 let selectedChampionTier = "All";
337,340c318,321
<             function updateChampionSubfilterVisibility() {
<                 const filter = document.getElementById("champion-filter");
<                 filter.style.display = selectedCardType === "Champion" ? "flex" : "none";
<             }
---
>                 function updateChampionSubfilterVisibility() {
>                     const filter = document.getElementById("champion-filter");
>                     filter.style.display = selectedCardType === "Champion" ? "flex" : "none";
>                 }
342,351c323,332
<             function appendRarityBadge(cardElement, rarity){
<                 if(!rarity || cardElement.querySelector('.rarity-badge')) return;
<                 cardElement.style.position = cardElement.style.position || 'relative';
< 
<                 const badge        = document.createElement('span');
<                 badge.className    = `rarity-badge rarity-${rarity.toLowerCase()}`;
<                 //badge.textContent  = rarity;
<                 badge.textContent = rarity.trim()[0].toUpperCase();
<                 cardElement.appendChild(badge);
<             }
---
>                 function appendRarityBadge(cardElement, rarity){
>                     if(!rarity || cardElement.querySelector('.rarity-badge')) return;
>                     cardElement.style.position = cardElement.style.position || 'relative';
> 
>                     const badge        = document.createElement('span');
>                     badge.className    = `rarity-badge rarity-${rarity.toLowerCase()}`;
>                     //badge.textContent  = rarity;
>                     badge.textContent = rarity.trim()[0].toUpperCase();
>                     cardElement.appendChild(badge);
>                 }
353c334
<             const toggleRarityBtn = document.getElementById('toggleRarityBtn');
---
>                 const toggleRarityBtn = document.getElementById('toggleRarityBtn');
355,356c336,337
<             toggleRarityBtn.addEventListener('click', () => {
<                 document.body.classList.toggle('rarity-hidden');
---
>                 toggleRarityBtn.addEventListener('click', () => {
>                     document.body.classList.toggle('rarity-hidden');
358,360c339,341
<                 const hidden = document.body.classList.contains('rarity-hidden');
<                 toggleRarityBtn.textContent = hidden ? 'Show Rarities' : 'Hide Rarities';
<             });
---
>                     const hidden = document.body.classList.contains('rarity-hidden');
>                     toggleRarityBtn.textContent = hidden ? 'Show Rarities' : 'Hide Rarities';
>                 });
362,367c343,349
<             document.querySelectorAll(".champ-filter-btn").forEach(btn => {
<                 btn.addEventListener("click", () => {
<                     selectedChampionTier = btn.dataset.champ;
<                     document.querySelectorAll(".champ-filter-btn").forEach(b => b.classList.remove("active"));
<                     btn.classList.add("active");
<                     renderSearchResults();
---
>                 document.querySelectorAll(".champ-filter-btn").forEach(btn => {
>                     btn.addEventListener("click", () => {
>                         selectedChampionTier = btn.dataset.champ;
>                         document.querySelectorAll(".champ-filter-btn").forEach(b => b.classList.remove("active"));
>                         btn.classList.add("active");
>                         renderSearchResults();
>                     });
369d350
<             });
371,382c352,374
<             const container = document.getElementById("card-wrapper");
<             const emptyMessage = document.getElementById("empty-message");
<             const deckNameElement = document.getElementById("deck-name");
<             const viewingWindow = document.getElementById("viewing-window");
<             const scaledCardContainer = document.getElementById("scaled-card");
<             let lastHoveredCard = null;
< 
<             const searchInput = document.getElementById("search-input");
<             const textSearchInput = document.getElementById("text-search-input");
<             const searchResults = document.getElementById("search-results");
<             const conditionInput = document.getElementById("condition-search-input");
<             const costInput = document.getElementById("cost-search-input");
---
>                 const container = document.getElementById("card-wrapper");
>                 const emptyMessage = document.getElementById("empty-message");
>                 const deckNameElement = document.getElementById("deck-name");
>                 const viewingWindow = document.getElementById("viewing-window");
>                 const scaledCardContainer = document.getElementById("scaled-card");
>                 let lastHoveredCard = null;
> 
>                 const searchInput = document.getElementById("search-input");
>                 const textSearchInput = document.getElementById("text-search-input");
>                 const searchResults = document.getElementById("search-results");
>                 const conditionInput = document.getElementById("condition-search-input");
>                 const costInput = document.getElementById("cost-search-input");
> 
>                 conditionInput.addEventListener("input", renderSearchResults);
>                 costInput.addEventListener("input", renderSearchResults);
> 
>                 const toggleBtn = document.getElementById("toggle-options-btn");
>                 const searchOptions = document.getElementById("search-options");
> 
>                 toggleBtn.addEventListener("click", () => {
>                     const isOpen = searchOptions.classList.toggle("open");
>                     toggleBtn.textContent = isOpen ? "Hide Extra Options ▲" : "Show More Options ▼";
>                 });
384,385c376
<             conditionInput.addEventListener("input", renderSearchResults);
<             costInput.addEventListener("input", renderSearchResults);
---
>                 container.innerHTML = "";  // Clear container before rendering
387,389c378,390
<             if (deckNameElement && deckNameElement.textContent.trim() !== "") {
<                 document.title = "Deck: " + deckNameElement.textContent.trim();
<             }
---
>                 const params = new URLSearchParams(location.search);
>                 let colName = params.get('collection');
>                 if (!colName) {
>                     alert("⚠️ sagaDeck.html loaded without a valid ?collection= parameter!");
>                     return;
>                 }
>                 // On first save or on initial load of sagaDeck.html
>                 const col    = colName;  // or deckName
>                 const sagaList = JSON.parse(localStorage.getItem('sagaCollections')||'[]');
>                 if (!sagaList.includes(col)) {
>                     sagaList.push(col);
>                     localStorage.setItem('sagaCollections', JSON.stringify(sagaList));
>                 }
391,392c392,434
<             const toggleBtn = document.getElementById("toggle-options-btn");
<             const searchOptions = document.getElementById("search-options");
---
>                 let collectionIds = [];
>                 let collectionPool = [];
>                 // New: unique per collection
>                 const storageKeyDeck   = `workingDeck_${colName}`;
>                 const storageKeyName   = `selectedDeckName_${colName}`;
>                 let deckName = colName;
>                 localStorage.setItem(storageKeyName, deckName);
>                 deckNameElement.textContent = colName;
>                 document.title = "Deck: " + colName;
> 
>                 // Decide if we came via selector.html (editing) or sagaOpener.html (fresh)
>                 const fromSelector = document.referrer.endsWith("selector.html");
>                 let deckIds = [];
> 
>                 if (fromSelector) {
>                 // 1) Try loading a draft from localStorage
>                 const draft = JSON.parse(localStorage.getItem(storageKeyDeck) || 'null');
>                 if (Array.isArray(draft)) {
>                     deckIds = draft;
>                 } else {
>                     // 2) Otherwise fetch the saved deck from server
>                     try {
>                     const res = await fetch(
>                         'https://geimon-app-833627ba44e0.herokuapp.com/getDeckCards',
>                         {
>                         method: "POST",
>                         credentials: "include",
>                         headers: { "Content-Type": "application/json" },
>                         body: JSON.stringify({ deck_name: colName, owner: params.get('user') })
>                         }
>                     );
>                     const data = await res.json();
>                     if (data.success && Array.isArray(data.card_ids)) {
>                         deckIds = data.card_ids.map(String);
>                     }
>                     } catch (e) {
>                     console.warn("Could not load saved Saga deck:", e);
>                     }
>                 }
>                 } else {
>                 // Fresh Saga run: clear any old draft
>                 deckIds = [];
>                 }
394,397c436
<             toggleBtn.addEventListener("click", () => {
<                 const isOpen = searchOptions.classList.toggle("open");
<                 toggleBtn.textContent = isOpen ? "Hide Extra Options ▲" : "Show More Options ▼";
<             });
---
>                 localStorage.setItem(storageKeyDeck, JSON.stringify(deckIds));
399d437
<             container.innerHTML = "";  // Clear container before rendering
401,425c439,449
<             // ─── Determine which search pool to use ───────────────
<             const params = new URLSearchParams(location.search);
<             const deckName = localStorage.getItem('selectedDeckName') || params.get('deck');
<             deckNameElement.textContent = deckName;
<             document.title = `Deck: ${deckName}`;
<             const sagaCollections = JSON.parse(localStorage.getItem('sagaCollections') || '[]');
<             const useCollectionPool = sagaCollections.includes(deckName);
< 
<             let searchPool = [];      // will hold either the limited or full set
<             let deckIds    = [];      // current deck contents
< 
<             // seed deckIds from selector flow (unchanged)
<             const storedCards = localStorage.getItem("selectedDeckCards");
<             deckIds = storedCards ? JSON.parse(storedCards) : [];
< 
<             // now choose searchPool
<             if (useCollectionPool) {
<             // saga‐created deck: fetch just its collection
<             fetch(`https://geimon-app-833627ba44e0.herokuapp.com/collection/get?name=${encodeURIComponent(deckName)}`, { credentials:'include' })
<                 .then(r => r.json())
<                 .then(data => {
<                     if (data.success) {
<                         searchPool = cards.filter(c => data.card_ids.includes(String(c.id)));
<                     } else {
<                         searchPool = cards; // fallback to full pool on error
---
>                 async function checkLegality(deckName) {
>                     try {
>                         const response = await fetch(`https://geimon-app-833627ba44e0.herokuapp.com/isLegal?deck_name=${encodeURIComponent(deckName)}`, {
>                         method: 'GET',
>                         credentials: 'include'
>                         });
>                         const data = await response.json();
>                         return data.legal;
>                     } catch (error) {
>                         console.warn("Error fetching deck legality status:", error);
>                         return false;
427,440c451
<                     renderDeck();
<                     renderSearchResults();
<                 })
<                 .catch(() => {
<                     searchPool = cards;
<                     renderDeck();
<                     renderSearchResults();
<                 });
<             } else {
<                 // standard deck: full 302-card pool
<                 searchPool = cards;
<                 renderDeck();
<                 renderSearchResults();
<             }
---
>                 }
442,466c453,465
<             const saveDeckBtn = document.getElementById("save-deck-btn");
<             const closeDeckBtn = document.getElementById("close-deck-btn");
<             const sortDeckBtn = document.getElementById("sort-deck-btn");
< 
<             sortDeckBtn.addEventListener("click", () => {
<                 const typeOrder = {
<                     Champion: 0,
<                     Action: 1,
<                     Equipment: 2,
<                     Obelisk: 3,
<                     Rush: 4,
<                     Reflex: 5
<                 };
< 
<                 // 1) Map deckIds → card objects
<                 const deckCards = deckIds
<                     .map(id => cards.find(card => String(card.id) === String(id)))
<                     .filter(Boolean);
< 
<                 // 2) Sort by type then name
<                 const sorted = [...deckCards].sort((a, b) => {
<                     const typeCompare = (typeOrder[a.type] ?? 999) - (typeOrder[b.type] ?? 999);
<                     if (typeCompare !== 0) return typeCompare;
<                     return a.name.localeCompare(b.name);
<                 });
---
>                 (async () => {
>                     try {
>                         const url = 
>                         `https://geimon-app-833627ba44e0.herokuapp.com/collection/get` +
>                         `?name=${encodeURIComponent(colName)}`;
>                         console.log("→ Fetching saga collection from:", url);
>                         const r = await fetch(url, { credentials:'include' });
>                         console.log("← HTTP status:", r.status);
>                         if (!r.ok) {
>                         throw new Error(`Network error: ${r.status}`);
>                         }
>                         const data = await r.json();
>                         console.log("← JSON response:", data);
468,469c467,469
<                 // 3) Rebuild deckIds in sorted order
<                 deckIds = sorted.map(card => card.id);
---
>                         if (!data.success) {
>                         throw new Error(`API returned success=false`);
>                         }
471,472c471,487
<                 // 4) Persist the reordered deck
<                 localStorage.setItem("selectedDeckCards", JSON.stringify(deckIds));
---
>                         collectionIds = data.card_ids.map(id => String(id));
>                         collectionPool  = cards.filter(c =>
>                             collectionIds.includes(String(c.id))
>                         );
>                         console.log("→ collectionIds:", collectionIds);
>                         console.log("→ collectionPool length:", collectionPool.length);
>                     } catch (err) {
>                         console.error("Failed to load saga collection:", err);
>                         // Optionally show the user a visible error:
>                         alert("Error loading your saga collection. See console.");
>                     } finally {
>                         // Always render—so you can see either the loaded cards or
>                         // that you really have an empty pool.
>                         renderDeck();
>                         renderSearchResults();
>                     }
>                 })();
474,476c489,501
<                 // 5) Re-render the deck pane
<                 renderDeck();
<             });
---
>                 const saveDeckBtn = document.getElementById("save-deck-btn");
>                 const closeDeckBtn = document.getElementById("close-deck-btn");
>                 const sortDeckBtn = document.getElementById("sort-deck-btn");
> 
>                 sortDeckBtn.addEventListener("click", () => {
>                     const typeOrder = {
>                         Champion: 0,
>                         Action: 1,
>                         Equipment: 2,
>                         Obelisk: 3,
>                         Rush: 4,
>                         Reflex: 5
>                     };
477a503,505
>                     const deckCards = deckIds
>                         .map(id => cards.find(card => String(card.id) === String(id)))
>                         .filter(Boolean);
479,481c507,511
<             // Save Deck button functionality
<             saveDeckBtn.addEventListener("click", async () => {
<             const deckName = localStorage.getItem("selectedDeckName") || "My Deck";
---
>                     const sorted = [...deckCards].sort((a, b) => {
>                         const typeCompare = (typeOrder[a.type] ?? 999) - (typeOrder[b.type] ?? 999);
>                         if (typeCompare !== 0) return typeCompare;
>                         return a.name.localeCompare(b.name);
>                     });
483,489c513,516
<             try {
<             const response = await fetch('https://geimon-app-833627ba44e0.herokuapp.com/saveDeck', {
<                 method: 'POST',
<                 credentials: 'include',
<                 headers: { 'Content-Type': 'application/json' },
<                 body: JSON.stringify({ deck_name: deckName, card_ids: deckIds })
<             });
---
>                     deckIds = sorted.map(c=>c.id);
>                     localStorage.setItem(storageKeyDeck, JSON.stringify(deckIds));
>                     renderDeck();
>                 });
491,494c518,532
<             if (!response.ok) {
<                 const text = await response.text();
<                 throw new Error(`HTTP ${response.status}: ${text}`);
<             }
---
>                 // Save Deck button functionality
>                 saveDeckBtn.addEventListener("click", async () => {
>                     const deckName     = localStorage.getItem(storageKeyName);
>                     const fromSelector = document.referrer.endsWith("selector.html");
> 
>                     // 0) If this is a Saga deck, enforce legality first
>                     const sagaList   = JSON.parse(localStorage.getItem('sagaCollections') || '[]');
>                     const isSagaDeck = sagaList.includes(deckName);
>                     // enforce Saga legality *locally* (>=60 cards & no more than 3 copies)
>                     if (isSagaDeck) {
>                         if (deckIds.length < 60) {
>                             alert("Your Saga deck must have at least 60 cards before saving.");
>                             return;
>                         }
>                     }
496c534,557
<             const data = await response.json();
---
>                     // 1) Save deck on server (upsert via /saveDeck)
>                     try {
>                         const response = await fetch(
>                         'https://geimon-app-833627ba44e0.herokuapp.com/saveDeck',
>                         {
>                             method: 'POST',
>                             credentials: 'include',
>                             headers: { 'Content-Type': 'application/json' },
>                             body: JSON.stringify({ deck_name: deckName, card_ids: deckIds })
>                         }
>                         );
>                         if (!response.ok) {
>                             const text = await response.text();
>                             throw new Error(`HTTP ${response.status}: ${text}`);
>                         }
>                         const result = await response.json();
>                         if (!result.success) {
>                             throw new Error(result.error || result.message || 'Unknown');
>                         }
>                         alert("Deck saved!");
>                     } catch (error) {
>                         console.error("Error saving deck:", error);
>                         return alert("Error saving deck. See console for details.");
>                     }
498,507c559,575
<             if (data.success) {
<                 alert("Deck saved!");
<             } else {
<                 alert("Failed to save deck: " + data.error);
<             }
<             } catch (error) {
<             console.error("Error saving deck:", error);
<             alert("Error saving deck. See console for details.");
<             }
<         });
---
>                     // 2) Post-save routing
>                     if (fromSelector) {
>                         // Came in from selector.html: just close the builder
>                         // window.close();    // uncomment if you want the tab to close
>                         // OR redirect back to selector:
>                         // window.location.href = 'selector.html';
>                     } else {
>                         // Saga flow mid-game: continue into match
>                         const params = new URLSearchParams(location.search);
>                         const room   = params.get('room');
>                         const user   = params.get('user');
>                         window.location.href =
>                         `sagaMatch.html?room=${encodeURIComponent(room)}` +
>                         `&deck=${encodeURIComponent(deckName)}` +
>                         `&user=${encodeURIComponent(user)}`;
>                     }
>                 });
508a577,580
>                 // Close Deck button functionality
>                 closeDeckBtn.addEventListener("click", () => {
>                     window.close();
>                 });
510,513c582,589
<             // Close Deck button functionality
<             closeDeckBtn.addEventListener("click", () => {
<             window.close();
<             });
---
>                 function saveDeck() {
>                     localStorage.setItem("selectedDeckCards", JSON.stringify(deckIds));
>                     updateDeckInfo(
>                         deckIds
>                             .map(id => cards.find(card => String(card.id) === String(id)))
>                             .filter(Boolean)
>                     );
>                 }
515,522c591,600
<             function saveDeck() {
<                 localStorage.setItem("selectedDeckCards", JSON.stringify(deckIds));
<                 updateDeckInfo(
<                     deckIds
<                         .map(id => cards.find(card => String(card.id) === String(id)))
<                         .filter(Boolean)
<                 );
<             }
---
>                 function addCardToDeck(cardId) {
>                     if (!deckIds.includes(cardId)) {
>                         deckIds.push(cardId);
>                         localStorage.setItem(storageKeyDeck, JSON.stringify(deckIds));
>                         renderDeck();
>                         renderSearchResults(); // refresh search to update buttons
>                     } else {
>                         console.warn(`Card with ID ${cardId} is already in the deck.`);
>                     }
>                 }
524,527c602,604
<             function addCardToDeck(cardId) {
<                 if (!deckIds.includes(cardId)) {
<                     deckIds.push(cardId);
<                     localStorage.setItem("selectedDeckCards", JSON.stringify(deckIds));
---
>                 function removeCardFromDeck(cardId) {
>                     deckIds = deckIds.filter(id => String(id) !== String(cardId));
>                     localStorage.setItem(storageKeyDeck, JSON.stringify(deckIds));
530,531d606
<                 } else {
<                     console.warn(`Card with ID ${cardId} is already in the deck.`);
533d607
<             }
535,548c609,615
<             function removeCardFromDeck(cardId) {
<                 deckIds = deckIds.filter(id => String(id) !== String(cardId));
<                 localStorage.setItem("selectedDeckCards", JSON.stringify(deckIds));
<                 renderDeck();
<                 renderSearchResults(); // refresh search to update buttons
<             }
< 
<             function renderDeck() {
<                 container.innerHTML = "";
<                 if (deckIds.length === 0) {
<                     emptyMessage.style.display = "block";
<                     updateDeckInfo([]);
<                 } else {
<                     emptyMessage.style.display = "none";
---
>                 function renderDeck() {
>                     container.innerHTML = "";
>                     if (deckIds.length === 0) {
>                         emptyMessage.style.display = "block";
>                         updateDeckInfo([]);
>                     } else {
>                         emptyMessage.style.display = "none";
550,552c617,656
<                     const deckCards = deckIds
<                         .map(id => cards.find(card => String(card.id) === String(id)))
<                         .filter(Boolean);
---
>                         const deckCards = deckIds
>                             .map(id => cards.find(card => String(card.id) === String(id)))
>                             .filter(Boolean);
> 
>                         updateDeckInfo(deckCards);
> 
>                         deckCards.forEach(card => {
>                             const cardElement = renderCard(card, container);
>                             appendRarityBadge(cardElement, card.rarity);
>                             if (cardElement) {
>                                 const button = document.createElement("button");
>                                 button.classList.add("card-button");
>                                 button.style.zIndex = "1000"; 
>                                 button.style.pointerEvents = "auto"; 
>                                 button.title = "Remove card from deck";
>                                 button.addEventListener("click", () => {
>                                     removeCardFromDeck(card.id);
>                                 });
> 
>                                 cardElement.appendChild(button);
> 
>                                 cardElement.addEventListener("mouseenter", () => {
>                                     scaledCardContainer.innerHTML = "";
>                                     const clone = cardElement.cloneNode(true);
>                                     const cloneButton = clone.querySelector(".card-button");
>                                     if (cloneButton) cloneButton.remove();
>                                     clone.classList.add("scaled-card");
>                                     scaledCardContainer.appendChild(clone);
>                                     addTooltipListeners(clone);
>                                     addTokenTooltipListeners(clone);
>                                     lastHoveredCard = clone;
>                                 });
>                             }
>                         });
> 
>                         container.addEventListener("mouseleave", () => {
>                             lastHoveredCard = null;
>                         });
>                     }
>                 }
554c658
<                     updateDeckInfo(deckCards);
---
>             //renderDeck();
556,583c660
<                     deckCards.forEach(card => {
<                         const cardElement = renderCard(card, container);
<                         appendRarityBadge(cardElement, card.rarity);
<                         if (cardElement) {
<                             const button = document.createElement("button");
<                             button.classList.add("card-button");
<                             button.style.zIndex = "1000"; 
<                             button.style.pointerEvents = "auto"; 
<                             button.title = "Remove card from deck";
<                             button.addEventListener("click", () => {
<                                 removeCardFromDeck(card.id);
<                             });
< 
<                             cardElement.appendChild(button);
< 
<                             cardElement.addEventListener("mouseenter", () => {
<                                 scaledCardContainer.innerHTML = "";
<                                 const clone = cardElement.cloneNode(true);
<                                 const cloneButton = clone.querySelector(".card-button");
<                                 if (cloneButton) cloneButton.remove();
<                                 clone.classList.add("scaled-card");
<                                 scaledCardContainer.appendChild(clone);
<                                 addTooltipListeners(clone);
<                                 addTokenTooltipListeners(clone);
<                                 lastHoveredCard = clone;
<                             });
<                         }
<                     });
---
>             //const sortedCards = [...cards].sort((a, b) => a.name.localeCompare(b.name));
585,587c662,682
<                     container.addEventListener("mouseleave", () => {
<                         lastHoveredCard = null;
<                     });
---
>             async function updateDeckInfo(deckCards) {
>                 const deckInfoDiv = document.getElementById('deck-info');
>                 deckInfoDiv.textContent = "Loading deck info...";
>             // Count card types
>             const counts = {
>                 Champions: 0,
>                 Actions: 0,
>                 Equipments: 0,
>                 Obelisks: 0,
>                 Rush: 0,
>                 Reflex: 0,
>             };
> 
>             deckCards.forEach(card => {
>                 switch (card.type) {
>                     case 'Champion': counts.Champions++; break;
>                     case 'Action': counts.Actions++; break;
>                     case 'Equipment': counts.Equipments++; break;
>                     case 'Obelisk': counts.Obelisks++; break;
>                     case 'Rush': counts.Rush++; break;
>                     case 'Reflex': counts.Reflex++; break;
589,591c684
<             }
< 
<     renderDeck();
---
>             });
593c686
<     const sortedCards = [...cards].sort((a, b) => a.name.localeCompare(b.name));
---
>             const total = deckCards.length;
595,615c688,714
<     async function updateDeckInfo(deckCards) {
<         const deckInfoDiv = document.getElementById('deck-info');
<         deckInfoDiv.textContent = "Loading deck info...";
<     // Count card types
<     const counts = {
<         Champions: 0,
<         Actions: 0,
<         Equipments: 0,
<         Obelisks: 0,
<         Rush: 0,
<         Reflex: 0,
<     };
< 
<     deckCards.forEach(card => {
<         switch (card.type) {
<             case 'Champion': counts.Champions++; break;
<             case 'Action': counts.Actions++; break;
<             case 'Equipment': counts.Equipments++; break;
<             case 'Obelisk': counts.Obelisks++; break;
<             case 'Rush': counts.Rush++; break;
<             case 'Reflex': counts.Reflex++; break;
---
>             try {
>                 const deckName = localStorage.getItem(storageKeyName);
>                 const isLegal = await checkLegality(deckName);
>                 const deckSizeColor = isLegal ? "#4CAF50" : "#ff4d4d";
> 
>                 deckInfoDiv.innerHTML = `
>                     <span style="color: ${deckSizeColor};">Deck Size: ${total}</span>
>                     <span>Champions: ${counts.Champions}</span>
>                     <span>Actions: ${counts.Actions}</span>
>                     <span>Equipments: ${counts.Equipments}</span>
>                     <span>Obelisks: ${counts.Obelisks}</span>
>                     <span>Rush: ${counts.Rush}</span>
>                     <span>Reflex: ${counts.Reflex}</span>
>                 `;
>             } catch (e) {
>                 // In case something fails unexpectedly, still update the info with 0s
>                 console.error("Failed to update deck info:", e);
>                 deckInfoDiv.innerHTML = `
>                     <span style="color: #ff4d4d;">Deck Size: 0</span>
>                     <span>Champions: 0</span>
>                     <span>Actions: 0</span>
>                     <span>Equipments: 0</span>
>                     <span>Obelisks: 0</span>
>                     <span>Rush: 0</span>
>                     <span>Reflex: 0</span>
>                 `;
>             }
617,619d715
<     });
< 
<     const total = deckCards.length;
621,666c717,719
<     async function checkLegality(deckName) {
<     try {
<         const response = await fetch(`https://geimon-app-833627ba44e0.herokuapp.com/isLegal?deck_name=${encodeURIComponent(deckName)}`, {
<         method: 'GET',
<         credentials: 'include'
<         });
<         const data = await response.json();
<         return data.legal;
<     } catch (error) {
<         console.warn("Error fetching deck legality status:", error);
<         return false;
<     }
<     }
< 
<     try {
<         const storedDeckName = localStorage.getItem("selectedDeckName") || "My Deck";
<         const isLegal = await checkLegality(storedDeckName);
<         const deckSizeColor = isLegal ? "#4CAF50" : "#ff4d4d";
< 
<         deckInfoDiv.innerHTML = `
<             <span style="color: ${deckSizeColor};">Deck Size: ${total}</span>
<             <span>Champions: ${counts.Champions}</span>
<             <span>Actions: ${counts.Actions}</span>
<             <span>Equipments: ${counts.Equipments}</span>
<             <span>Obelisks: ${counts.Obelisks}</span>
<             <span>Rush: ${counts.Rush}</span>
<             <span>Reflex: ${counts.Reflex}</span>
<         `;
<     } catch (e) {
<         // In case something fails unexpectedly, still update the info with 0s
<         console.error("Failed to update deck info:", e);
<         deckInfoDiv.innerHTML = `
<             <span style="color: #ff4d4d;">Deck Size: 0</span>
<             <span>Champions: 0</span>
<             <span>Actions: 0</span>
<             <span>Equipments: 0</span>
<             <span>Obelisks: 0</span>
<             <span>Rush: 0</span>
<             <span>Reflex: 0</span>
<         `;
<     }
< }
< 
<     searchInput.addEventListener("input", () => {
<         renderSearchResults();
<     });
---
>             searchInput.addEventListener("input", () => {
>                 renderSearchResults();
>             });
668,670c721,723
<     textSearchInput.addEventListener("input", () => {
<         renderSearchResults();
<     });
---
>             textSearchInput.addEventListener("input", () => {
>                 renderSearchResults();
>             });
672,674c725,727
<     document.getElementById("tag-search-input").addEventListener("input", () => {
<         renderSearchResults();
<     });
---
>             document.getElementById("tag-search-input").addEventListener("input", () => {
>                 renderSearchResults();
>             });
676c729,776
<     function renderSearchResults() {
---
>             function renderSearchResults() {
>                 // 1) Clear previous results
>                 searchResults.innerHTML = "";
> 
>                 // 2) Grab filter values
>                 const nameQuery      = searchInput.value.trim().toLowerCase();
>                 const textQuery      = textSearchInput.value.trim().toLowerCase();
>                 const tagQuery       = (document.getElementById("tag-search-input").value || "").trim().toLowerCase();
>                 const conditionQuery = conditionInput.value.trim().toLowerCase();
>                 const costQuery      = costInput.value.trim().toLowerCase();
> 
>                 // 3) Filter from the player's collectionPool
>                 let filteredCards = collectionPool.filter(card => {
>                     // Name
>                     if (nameQuery && !card.name.toLowerCase().includes(nameQuery)) {
>                     return false;
>                     }
>                     // Text
>                     if (textQuery && !card.abilities.some(a => a.text.toLowerCase().includes(textQuery))) {
>                     return false;
>                     }
>                     // Tags
>                     if (tagQuery && !(card.tags && card.tags.some(t => t.toLowerCase().includes(tagQuery)))) {
>                     return false;
>                     }
>                     // Condition
>                     if (conditionQuery && !(card.condition && card.condition.toLowerCase().includes(conditionQuery))) {
>                     return false;
>                     }
>                     // Cost
>                     if (costQuery && !String(card.cost || "").toLowerCase().includes(costQuery)) {
>                     return false;
>                     }
>                     // Type
>                     if (selectedCardType && card.type !== selectedCardType) {
>                     return false;
>                     }
>                     // Champion tier (only when type is Champion)
>                     if (selectedCardType === "Champion" && selectedChampionTier !== "All") {
>                     if (selectedChampionTier === "Basic" && card.cost !== "Basic") {
>                         return false;
>                     }
>                     if (selectedChampionTier === "Elite" && card.cost === "Basic") {
>                         return false;
>                     }
>                     }
>                     return true;
>                 });
678,727c778,780
<         searchResults.innerHTML = "";
<         const nameQuery = searchInput.value.trim().toLowerCase();
<         const textQuery = textSearchInput.value.trim().toLowerCase();
<         const tagQuery = (document.getElementById("tag-search-input").value || "").trim().toLowerCase();
<         const conditionQuery = conditionInput.value.trim().toLowerCase();
<         const costQuery = costInput.value.trim().toLowerCase();
< 
<         const filteredCards = searchPool.filter(card => {
<             const nameMatches = !nameQuery || card.name.toLowerCase().includes(nameQuery);
<             const textMatches = !textQuery || card.abilities.some(ability => ability.text.toLowerCase().includes(textQuery));
<             const tagMatches = !tagQuery || (card.tags && card.tags.some(tag => tag.toLowerCase().includes(tagQuery)));
<             const conditionMatches = !conditionQuery || (card.condition && card.condition.toLowerCase().includes(conditionQuery));
<             const costMatches = !costQuery || (String(card.cost || "").toLowerCase().includes(costQuery));
<             const typeMatches = !selectedCardType || card.type === selectedCardType;
<             const champMatches =
<                 selectedCardType !== "Champion" || selectedChampionTier === "All" ||
<                 (selectedChampionTier === "Basic" && card.cost === "Basic") ||
<                 (selectedChampionTier === "Elite" && card.cost !== "Basic");
<             return nameMatches && textMatches && tagMatches && conditionMatches && costMatches && typeMatches && champMatches;
<         });
< 
<         filteredCards.sort((a, b) =>
<             a.name.localeCompare(b.name, undefined, { sensitivity: 'base' })
<         );
< 
<         const cardCountElement = document.getElementById("card-count");
<         cardCountElement.textContent = `Cards Displayed: ${filteredCards.length}`;
< 
<         filteredCards.forEach(card => {
<             const cardElement = renderCard(card, searchResults);
<             appendRarityBadge(cardElement, card.rarity);
< 
<             if (cardElement) {
<                 const button = cardElement.querySelector(".card-button"); // ✅ override existing one
< 
<             if (button) {
<                 const isInDeck = deckIds.some(id => String(id) === String(card.id));
< 
<                 if (isInDeck) {
<                     button.disabled = true;
<                     button.style.cursor = "not-allowed";
<                     button.title = "Already in deck";
<                 } else {
<                     button.disabled = false;
<                     button.style.cursor = "pointer";
<                     button.title = "Add card to deck";
<                     button.onclick = () => addCardToDeck(card.id); // ✅ override default handler
<                     button._originalHandler = button.onclick;      // optional, but preserves pattern
<                 }
<             }
---
>                 filteredCards.sort((a, b) =>
>                     a.name.localeCompare(b.name, undefined, { sensitivity: 'base' })
>                 );
729c782,805
<                 cardElement.appendChild(button);
---
>                 // 4) Update count display
>                 document.getElementById("card-count").textContent =
>                     `Cards Displayed: ${filteredCards.length}`;
> 
>                 // 5) Render each filtered card
>                 filteredCards.forEach(card => {
>                     const cardElement = renderCard(card, searchResults);
>                     appendRarityBadge(cardElement, card.rarity);
> 
>                     // Override the built-in button behavior
>                     const button = cardElement.querySelector(".card-button");
>                     if (button) {
>                     const isInDeck = deckIds.some(id => String(id) === String(card.id));
>                     if (isInDeck) {
>                         button.disabled = true;
>                         button.style.cursor = "not-allowed";
>                         button.title = "Already in deck";
>                     } else {
>                         button.disabled = false;
>                         button.style.cursor = "pointer";
>                         button.title = "Add card to deck";
>                         button.onclick = () => addCardToDeck(card.id);
>                     }
>                     }
731c807,808
<                 cardElement.addEventListener("mouseenter", () => {
---
>                     // Hover‐to‐scale behavior (unchanged)
>                     cardElement.addEventListener("mouseenter", () => {
743,745c820,821
<                 });
< 
<                 cardElement.addEventListener("mouseleave", () => {
---
>                     });
>                     cardElement.addEventListener("mouseleave", () => {
746a823
>                     });
749,751c826,827
<         });
<     }
<         renderSearchResults();
---
>             //renderSearchResults();
>         })();
780c856
< </html>
---
> </html>
\ No newline at end of file
